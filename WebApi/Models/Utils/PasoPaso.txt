Consola: 
Scaffold-DbContext "Server=DESKTOP-OTK2L2U\SQLEXPRESS; DataBase=DBAPI; Integrated Security=true; TrustServerCertificate=true" Microsoft.EntityFrameworkCore.SqlServer -OutPutDir Models
appsteings.json:
"ConnectionStrings": {
    "cdenaSQL": "Server=DESKTOP-OTK2L2U\\SQLEXPRESS; DataBase=DBAPI; Integrated Security=true; TrustServerCertificate=true"
  },
Program.cs:
using Microsoft.EntityFrameworkCore;
using WebApi.Models;
builder.Services.AddDbContext<DbapiContext>(options =>
    options.UseSqlServer(builder.Configuration.GetConnectionString("cadenaSQL")));

Click derecho carpeta controllers, agregar controlador, API, seleccionar modelo, en blanco
ProductController: 
using Microsoft.EntityFrameworkCore;
using WebApi.Models;

        public readonly DbapiContext _dbcontext;
        public ProductController(DbapiContext dbcontext)
        {
            _dbcontext = dbcontext;
        }

        [HttpGet]
        [Route("GetProducts")]
        public IActionResult GetProducts()
        {
            List<Producto> list = new List<Producto>();
            try
            {
                list = _dbcontext.Productos.Include(cat => cat.IdCategoriaNavigation).ToList();
                return StatusCode(StatusCodes.Status200OK, new { message = "ok", response = list });
            } catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status404NotFound, new { message = ex.Message, response = list });
            }
        }

Program.cs:
    builder.Services.AddControllers().AddJsonOptions(option => { option.JsonSerializerOptions.ReferenceHandler = ReferenceHandler.IgnoreCycles; });

------- Correr Proyecto

CREAR MAS APIS
POR ID: 
 [HttpGet]
        [Route("{idProducto:int}")]
        public IActionResult Product(int idProducto)
        {
            Producto producto = _dbcontext.Productos.Find(idProducto);

            if(producto == null)
            {
                return BadRequest("Producto no encontrado");
            }

            try
            {
                producto = _dbcontext.Productos.Include(cat => cat.IdCategoriaNavigation).Where(p => p.IdProducto == idProducto).FirstOrDefault();
                return StatusCode(StatusCodes.Status200OK, new { message = "ok", response = producto });
            }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status404NotFound, new { message = ex.Message, response = producto });
            }
        }

